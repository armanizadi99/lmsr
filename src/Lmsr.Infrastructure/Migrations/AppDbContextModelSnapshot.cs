// <auto-generated />
using Lmsr.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lmsr.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("Lmsr.Domain.Aggregates.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Courses", t =>
                        {
                            t.HasCheckConstraint("CK_Course_Title_NotEmpty", "Title <> ''");

                            t.HasCheckConstraint("CK_Course_UserId_NotEmpty", "UserId <> ''");
                        });
                });

            modelBuilder.Entity("Lmsr.Domain.Aggregates.Word", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Term")
                        .IsUnique();

                    b.ToTable("Words", t =>
                        {
                            t.HasCheckConstraint("CK_Word_Term_NotEmpty", "Term <> ''");
                        });
                });

            modelBuilder.Entity("Lmsr.Domain.Aggregates.WordDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WordId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Text")
                        .IsUnique();

                    b.HasIndex("WordId");

                    b.ToTable("WordDefinition", t =>
                        {
                            t.HasCheckConstraint("CK_WordDefinition_Text_NotEmpty", "Text <> ''");
                        });
                });

            modelBuilder.Entity("Lmsr.Domain.Aggregates.WordDefinition", b =>
                {
                    b.HasOne("Lmsr.Domain.Aggregates.Word", null)
                        .WithMany("Definitions")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Lmsr.Domain.Aggregates.Word", b =>
                {
                    b.Navigation("Definitions");
                });
#pragma warning restore 612, 618
        }
    }
}
